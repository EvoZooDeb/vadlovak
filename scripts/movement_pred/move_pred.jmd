---
title: Predicting movements in wild horses
date: 2020-06-11
---

```julia
using CSV, DataFrames
using StatsBase, Statistics
using PyPlot
using Plots
```


# Load data

We first load data.

```julia
mdf = CSV.read("horse_coordinates/180817/horse_coordinatesID.txt",
	header=["frame", "horse", "X", "Y"])
c = countmap(mdf.horse)
```


Plot the tracks.

```julia
j = 0
for h in keys(c)
	global j += 1
	if j % 20 == 0
		i = mdf.horse .== h
		PyPlot.plot(mdf.X[i], mdf.Y[i])
	end
end
```

Plot the track of one individual in detail.

```julia
h = collect(keys(c))[1]
i = mdf.horse .== h
X = mdf.X[i]
Y = mdf.Y[i]
j = 1:length(X)
PyPlot.plot(X[j], Y[j])
PyPlot.scatter(X[j], Y[j])
```

# Functions

To calculate step sizes, and movement directions. Directions are calculated relative to previous step.

Step size is simply the Euclidean distance between two consecutive points along a path.

```julia
function dist(x1, y1, x2, y2)
	return sqrt((x2-x1)^2 + (y2-y1)^2)
end
function steps(X::Array{Float64,1}, Y::Array{Float64,1})
	l = length(X)
	s = Float64[]
	for i in 2:l
		d = sqrt((X[i] - X[i-1])^2 + (Y[i] - Y[i-1])^2)
		push!(s, d)
	end
	return s
end
```

To calculate movement direction we use the coordinates of three consecutive points along a path. These three points form a triangle. To calculate movement angle we use [the law of cosines](https://en.wikipedia.org/wiki/Law_of_cosines).

```julia
function dist2(x1, y1, x2, y2)
	(x2-x1)^2 + (y2-y1)^2
end
function dir3(X::Array{Float64,1}, Y::Array{Float64,1})
	x = X .- X[1]
	y = Y .- Y[1]
	phi = atan(y[2], x[2])
	xp = x .* cos.(phi) .+ y .* sin.(phi)
	yp = -x .* sin.(phi) .+ y .* cos.(phi)
	a2 = dist2(xp[1], yp[1], xp[2], yp[2])
	b2 = dist2(xp[2], yp[2], xp[3], yp[3])
	c2 = dist2(xp[1], yp[1], xp[3], yp[3])
	cg = (a2+b2-c2)/(2*sqrt(a2*b2))
	if -1 <= cg <= 1
		gamma = pi - acos(cg)
		if yp[3] < 0
			return -gamma
		else
			return gamma
		end
	else
		return 0.0
	end
end
function directions(X::Array{Float64,1}, Y::Array{Float64,1})
	l = length(X)
	s = Float64[]
	push!(s, 0.0)
	for i in 2:(l-1)
		j = (i-1):(i+1)
		gamma = dir3(X[j], Y[j])
		push!(s, gamma)
	end
	return s
end
```

To determine the path of an individual we calculate a distance matrix between two sets of points.

```julia
function distmatrix(X1, Y1, X2, Y2)
	l1 = length(X1)
	l2 = length(X2)
	m = zeros(l1, l2)
	for i1 in 1:l1
		for i2 in 1:l2
			m[i1, i2] = dist(X1[i1], Y1[i1], X2[i2], Y2[i2])
		end
	end
	return m
end
```

We also calculate the directions between two sets of points.

```julia
function dirmatrix(X1, Y1, X2, Y2)
	l1 = length(X1)
	l2 = length(X2)
	m = zeros(l1, l2)
	for i1 in 1:l1
		for i2 in 1:l2
			m[i1, i2] = atan(Y2[i2] - Y1[i1], X2[i2] - X1[i1])
		end
	end
	return m
end
```

To determine the possible common movement pattern for individuals we use the distances and directions between points in one frame and points in the next frame.

```julia
function calcavgshift(m2, dm)
	l1, l2 =size(m2)
	is = zeros(Int64, l1)
	for i in 1:l1
		d1, i1 = findmin(m2[i,:])
		d2, i2 = findmin(m2[:,i1])
		if i == i2
			is[i] = i1
		else
			dmins = []
			dmin = 1e6
			minj = 0
			for j in 1:l2
				dj, jj = findmin(m2[:,j])
				if jj == i && dj < dmin
					dmin = dj
					minj = j
				end
			end
			is[i] = minj
		end
	end
	distances = Float64[]
	angles = Float64[]
	for i in 1:l1
		is[i] <= 0 && continue
		push!(distances, m2[i, is[i]])
		push!(angles, dm[i, is[i]])
	end
	return median(distances), median(angles)
end
```

This function below processes the distance matrix between two sets of points. It recursively identify pairs of points that are closest to each other.

```julia
function procmatrix(m2)
	l1, l2 =size(m2)
	is = zeros(Int64, l1)
	count = 0
	while sum(is .== 0) > 0 && count < l1
		count += 1
		for i in 1:l1
			is[i] > 0 && continue
			d1, i1 = findmin(m2[i,:])
			d2, i2 = findmin(m2[:,i1])
			if i == i2
				is[i] = i1
				m2[i,:] .= 1e6
				m2[:,i1] .= 1e6
			end
		end
	end
	r0 = findall(is .== 0)
	if length(r0) == 0 # all points sorted out
		println("all points sorted out")
		return is
	else # some ambiguities remained
		return nothing
	end
end
```

This function, given an average step size and an average direction, calculates the next possible position on a path.

```julia
function expectedpoint(x, y, qdist, qangle)
	px = qdist * cos(qangle)
	py = qdist * sin(qangle)
	return x + px, y + py
end
```

This function calculates the next position on a path by first calculating the average step length and direction.

```julia
function nextpoint(x, y)
	ds = steps(x, y)[2:end]
	as = directions(x,y)[2:end]
	ds = mean(ds)
	as = mean(as)
	a = atan(y[end] - y[end-1], x[end] - x[end-1])
	return expectedpoint(x[end], y[end], ds, a + as)
end
```


These [functions](https://github.com/anowacki/CircStats.jl/blob/master/src/CircStats.jl) calculating circular standard deviation from a set of angles.

```julia
cresultant(a, degrees::Bool=false) = degrees ?
    sqrt(sum(sin.(deg2rad.(a)))^2 + sum(cos.(deg2rad.(a)))^2)/length(a) :
    sqrt(sum(sin.(a))^2 + sum(cos.(a))^2)/length(a)
cstd(a, degrees::Bool=false) = sqrt(-2*log(cresultant(a, degrees)))
```

The main "workhorse". This function does the work calculate the positions along all distinct paths. For the first 4 frames it calculates expected positions of paths on the basis common movement of all horses. Then it uses the parameters derived from previous positions from each path. It returns two number of horses by number of frames, which contain the X and Y coordinates of path for each horses for each frames.

Know problems:

- appearance of new horses is not handled
- it is unknown what happens if a horse disappears



```julia
function sortpoints(mdf; lag=4, nframes = nothing)
	frames = unique(mdf.frame)
	isnothing(nframes) && (nframes = length(frames))
	f = mdf.frame .== frames[1]
	X1 = mdf.X[f]
	Y1 = mdf.Y[f]
	nhorses = length(X1)
	Xs = zeros(nframes, nhorses)
	Ys = zeros(nframes, nhorses)
	Xs[1,:] .= X1
	Ys[1,:] .= Y1
	m2 = 0.0
	dm = 0.0
	is = 0
	for f in 2:nframes
		println(f)
		xp = zeros(nhorses)
		yp = zeros(nhorses)
		fi = mdf.frame .== f
		xf = mdf.X[fi]
		yf = mdf.Y[fi]
		if f <= lag
			m2 = distmatrix(Xs[f-1,:], Ys[f-1,:], xf, yf)
			dm = dirmatrix(Xs[f-1,:], Ys[f-1,:], xf, yf)
			qd, qa = calcavgshift(m2, dm)
			for i in 1:nhorses
				xp[i], yp[i] = expectedpoint(Xs[f-1,i], Ys[f-1,i], qd, qa)
			end
		else
			for i in 1:nhorses
				xp[i], yp[i] = nextpoint(Xs[(f-lag):(f-1),i], Ys[(f-lag):(f-1),i])
			end
		end
		m2 = distmatrix(xp, yp, xf, yf)
		is = procmatrix(m2)
		for i in 1:length(is)
			Xs[f,i] = xf[is[i]]
			Ys[f,i] = yf[is[i]]
		end
	end
	return Xs, Ys
	#return is, m2
end
```

We extract the path of a given horse from the data-frame.

```julia
function getpath(ID::String, mdf)
	X = mdf.X[mdf.horse .== ID]
	Y = mdf.Y[mdf.horse .== ID]
	return X, Y
end
function getpath(id::Int, mdf)
	h = mdf.horse[mdf.frame .== 1][id]
	return getpath(h, mdf)
end
```

This function calculates the deviance (as the total distance between positions in the same frame) of hand and automatically derived paths for all horses. `Xs` and `Ys` are returned by `sortpoints`.

```julia
function deviance(Xs, Ys, mdf)
	#Xs, Ys = sortpoints(mdf)
	nframes, nhorses = size(Xs)
	diffhorses = Int[]
	totaldiff = 0
	for h in 1:nhorses
		x, y = getpath(h, mdf)
		dx = sum(Xs[:,h] .- x)
		dy = sum(Ys[:,h] .- y)
		d = abs(dx + dy)
		if d > 0.0
			push!(diffhorses, h)
			totaldiff += d
		end
	end
	if length(diffhorses) > 0
		return diffhorses, totaldiff/length(diffhorses)
	else
		return nothing, nothing
	end
end
```

## Graphics

This function plots the positions of horses along with their IDs.

```julia
function showtimeslot(nframe, mdf)
	gdf = groupby(mdf, :frame)
	fdf = gdf[nframe]
	for i in 1:nrow(fdf)
		PyPlot.scatter(fdf.X[i], fdf.Y[i])
		PyPlot.text(fdf.X[i], fdf.Y[i], fdf.horse[i], fontsize="xx-small")
	end
end
```

The function `myscatter` plots the positions of several horses in a given frame.

```julia
function myscatter(pointi, frame, mdf)
	typeof(pointi) == Int64 && (pointi = [pointi])
	horses = unique(mdf.horse[mdf.frame .== 1])
	horses = horses[pointi]
	gmdf = groupby(mdf, :frame)
	df = gmdf[frame]
	for h in horses
		j = (1:nrow(df))[df.horse .== h]
		PyPlot.scatter(df.X[j], df.Y[j])
		PyPlot.text(df.X[j], df.Y[j], string(h), fontsize="xx-small")
	end
end
```

This function plot the next predicted and realised positions for a horse in a given frame.

```julia
function shownextmove(id, f, mdf; lag=4)
	l = lag - 1
	Hs = mdf.horse[mdf.frame .== 1][id]
	for h in Hs
		x = mdf.X[mdf.horse .== h][(f-l):f]
		y = mdf.Y[mdf.horse .== h][(f-l):f]
		PyPlot.scatter(x, y)
		PyPlot.plot(x, y)
		xn, yn = nextpoint(x, y)
		PyPlot.scatter(xn, yn)
		xr = mdf.X[mdf.horse .== h][(f+1)]
		yr = mdf.Y[mdf.horse .== h][(f+1)]
		PyPlot.scatter(xr,yr)
		PyPlot.plot([x[end], xn], [y[end], yn], "--", label="predicted")
		PyPlot.plot([x[end], xr], [y[end], yr], "-.", label="real")
		legend()
	end
end
```

# Calculations

```julia
Xs, Ys = sortpoints(mdf)
PyPlot.plot(Xs[:,10], Ys[:,10])
x, y = getpath(10, mdf)
PyPlot.plot(x,y)
```

Calculating the deviance between predicted and actual paths.

```julia
devhorses, d = deviance(Xs, Ys, mdf)
```

We have `j length(devhorses)` paths where the predicted and actual paths do not match (`j 1-length(devhorses)/size(Xs)[1]`%).

An example of mismatch, between horse `2` and `3`.

```julia
figure()
subplot(1,2,1)
PyPlot.plot(Xs[:,2], Ys[:,2])
x, y = getpath(2, mdf)
PyPlot.plot(x,y)
subplot(1,2,2)
PyPlot.plot(Xs[:,3], Ys[:,3])
x, y = getpath(3, mdf)
PyPlot.plot(x,y)
tight_layout()
```

It seems that the algorithm switched from the path of one horse to the other, and vice versa.

```julia
i = 1950:1970
figure()
subplot(1,2,1)
x, y = getpath(2, mdf)
PyPlot.plot(x[i],y[i])
for j in i
	myscatter(2, j, mdf)
end
PyPlot.plot(Xs[i,2], Ys[i,2])
axis("equal")
subplot(1,2,2)
x, y = getpath(3, mdf)
PyPlot.plot(x[i],y[i])
for j in i
	myscatter(3, j, mdf)
end
PyPlot.plot(Xs[i,3], Ys[i,3])
axis("equal")
tight_layout()
```

```julia
figure()
shownextmove([2,3], 1955, mdf)
myscatter(2, 1955, mdf)
myscatter(3, 1955, mdf)
tight_layout()
```

It seems that having a lag of 4 frames to predict the next position is not enough. We run the path prediction algorithm with lags of 5, 6 and 7 and check its accuracy.

```julia
dhs = Dict()
dhs[4] = devhorses
for i in 5:7
	xs, ys = sortpoints(mdf, lag=i)
	dh, d = deviance(xs, ys, mdf)
	dhs[i] = dh
end
```

`lag=5` seems to have the highest accuracy, but we still have many mismatched paths.

```julia
for i in keys(dhs)
	println("lag=", i, ": ", length(dhs[i]))
end
```

Let's investigate some cases more closely. For instance, horse 204 is mismatched in all four attempts. We work further with `lag=5`.

```julia
Xs, Ys = sortpoints(mdf, lag=5)
```

```julia
figure()
x, y = getpath(204, mdf)
PyPlot.plot(x, y)
PyPlot.plot(Xs[:,204], Ys[:,204])
figure()
i = 3000:3050
PyPlot.plot(x[i], y[i])
PyPlot.plot(Xs[i,204], Ys[i,204])
hs = ["H115", "H274", "H158"]
for h in hs
	x, y = getpath(h, mdf)
	PyPlot.plot(x[i], y[i])
end
myscatter(206, 3025, mdf)
myscatter(204, 3025, mdf)
myscatter(215, 3025, mdf)
```

```julia
ds = Dict()
dis = Dict()
for h in unique(mdf.horse[mdf.frame .== 1])
	x, y = getpath(h, mdf)
	ds[h] = steps(x, y)
	dis[h] = directions(x, y)
end
```

```julia
mX = map((x) -> mean(mdf.X[mdf.frame .== x]), unique(mdf.frame))
mY = map((x) -> mean(mdf.Y[mdf.frame .== x]), unique(mdf.frame))
md = steps(mX, mY)
mdi = directions(mX, mY)
figure()
for h in keys(ds)
	PyPlot.plot(ds[h], linewidth=0.2)
end
PyPlot.plot(md)
figure()
for h in keys(dis)
	PyPlot.plot(abs.(dis[h]), linewidth=0.2)
end
PyPlot.plot(mdi)
```



```julia
i = 30
close("all")
h1 = collect(keys(c))[i]
i1 = mdf.horse .== h1
X1 = mdf.X[i1]
Y1 = mdf.Y[i1]
xc, yc = closest(h1, mdf, limit=2.0)
#j = 750:780
j = 1:nframe
PyPlot.plot(X1[j], Y1[j])
PyPlot.plot(xc[j], yc[j], "--")
```

```julia
f = mdf.frame .== 764
PyPlot.scatter(mdf.X[f], mdf.Y[f], s=4)
xlim((1100,1280))
ylim((1260,1280))
deviance(h1, mdf, nframe, limit=1.57)
```

```julia
f = map((i) -> i in 1050:1150, mdf.frame)
fdf = mdf[f,:]
i1 = fdf.horse .== h1
X1 = fdf.X[i1]
Y1 = fdf.Y[i1]
xc, yc = closest(h1, fdf, limit=2.0)
PyPlot.plot(X1, Y1)
PyPlot.plot(xc, yc, "--")
#axis("equal")
xlim((1600,1660))
ylim((1128,1139))
frames = unique(fdf.frame)
for f in 1:length(frames)
	ff = fdf.frame .== frames[f]
	PyPlot.scatter(fdf.X[ff], fdf.Y[ff])
end
```


# Plots

```julia
h = collect(keys(c))[212]
i = mdf.horse .== h
X = mdf.X[i]
Y = mdf.Y[i]
#X = [2.0, 1.0, -3.0]
#Y = [2.0, 0.0, -3.0]
s = steps(X, Y)
d = directions(X, Y)
#j = 1:length(unique(mdf.frame))
j = 2001:2500
jj = (minimum(j)):(maximum(j)-1)
#jj = (minimum(j)-1):(maximum(j)-1)
figure()
subplot(1,2,1)
plot(jj, s[jj])
plot(jj, d[jj], alpha=0.25)
scatter(jj, d[jj], alpha=0.25)
PyPlot.grid()
subplot(1,2,2)
PyPlot.plot(X[j], Y[j])
PyPlot.scatter(X[j], Y[j], alpha=0.25)
axis("equal")
PyPlot.grid()
tight_layout()
subplot(2,1,1)
plot(s)
subplot(2,1,2)
plot(d)
tight_layout()
scatter(s,d, s=1, alpha=0.25)
tight_layout()
```

